on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION_CI:
        required: true

jobs:
  publish-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install boto3 and jq
        run: |
          pip install boto3 --quiet
          sudo apt-get update && sudo apt-get install -y jq

      - name: Configure temporary AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_CI }}

      - name: Create and Access ECR Repo (if not exists)
        env:
          AWS_REGION_CI: ${{ secrets.AWS_REGION_CI }}
        run: |
          aws ecr describe-repositories --repository-names dev-tech-test || \
          aws ecr create-repository --repository-name dev-tech-test || true
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          aws ecr get-login-password --region $AWS_REGION_CI | \
            docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION_CI.amazonaws.com

      - name: Build and Push Docker Image
        env:
          AWS_REGION_CI: ${{ secrets.AWS_REGION_CI }}
          ACCOUNT_ID: ${{ env.ACCOUNT_ID }}
        run: |
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION_CI.amazonaws.com/dev-tech-test:latest
          docker build -t $IMAGE_URI -f app/Dockerfile app/
          docker push $IMAGE_URI