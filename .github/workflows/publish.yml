on:
  workflow_call:
    inputs:
      dockerfile_path:
        required: false
        type: string
        default: app/Dockerfile
      context:
        required: false
        type: string
        default: app
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION_CI:
        required: true

jobs:
  docker-build:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.set-image-uri.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image URI
        id: set-image-uri
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          IMAGE_TAG=$([[ "$BRANCH_NAME" == "main" ]] && echo "latest" || echo "${BRANCH_NAME//\//-}")
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_uri=$REPO_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.set-image-uri.outputs.image_uri }} \
            -f ${{ inputs.dockerfile_path }} ${{ inputs.context }}

  publish-ecr:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_CI }}

      - name: Create and Access ECR Repo (if not exists)
        env:
          AWS_REGION_CI: ${{ secrets.AWS_REGION_CI }}
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          aws ecr describe-repositories --repository-names $REPO_NAME >/dev/null 2>&1 || \
          (aws ecr create-repository --repository-name $REPO_NAME && echo "Created ECR repo: $REPO_NAME") || \
          echo "ECR repo $REPO_NAME already exists or failed to create, continuing..."
      
          # Get Aws Account ID and Login
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          
          aws ecr get-login-password --region $AWS_REGION_CI | \
            docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION_CI.amazonaws.com

      - name: Push Docker Image
        env:
          AWS_REGION_CI: ${{ secrets.AWS_REGION_CI }}
          ACCOUNT_ID: ${{ env.ACCOUNT_ID }}
          DOCKER_IMAGE: ${{ needs.docker-build.outputs.image_uri }}
        run: |
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION_CI.amazonaws.com/$DOCKER_IMAGE"
          echo "Publishing to ECR $IMAGE_URI"

          docker tag $DOCKER_IMAGE $IMAGE_URI
          docker push $IMAGE_URI