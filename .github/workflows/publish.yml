name: Publish build

on:
  workflow_call:

jobs:
  publish:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install boto3
        run: |
          pip install boto3 --quiet

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Retrieve credentials from AWS Secrets Manager
        id: fetch-secrets
        run: |
          SECRET=$(aws secretsmanager get-secret-value \
            --region ${{ secrets.AWS_REGION }} \
            --secret-id ${{ secrets.AWS_SECRET_NAME }} \
            --query SecretString --output text)
          
          echo "$SECRET" > secret.json
          echo "AWS_ACCESS_KEY_ID=$(jq -r .AWS_ACCESS_KEY_ID secret.json)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(jq -r .AWS_SECRET_ACCESS_KEY secret.json)" >> $GITHUB_ENV

      - name: Create ECR Repo (if not exists)
        run: |
          aws ecr describe-repositories --repository-names dev-tech-test || \
          aws ecr create-repository --repository-name dev-tech-test || true

      - name: Login to Amazon ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dev-tech-test:latest
          docker build -t $IMAGE_URI
          docker tag dev-tech-test:latest $IMAGE_URI
          docker push $IMAGE_URI
